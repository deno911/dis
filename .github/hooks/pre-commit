#!/usr/bin/env bash

function __pre_commit_hook() {

  declare DEBUG SILENT ENABLED
  # print additional debugging information
  DEBUG=$(git config --bool-or-int --default "${DEBUG:-false}" --get hooks.debug)

  # silence all warnings / output other than exit codes
  SILENT=$(git config --bool-or-int --default "${SILENT:-false}" --get hooks.silent)

  ENABLED=$(git config --bool-or-int --default "${ENABLED:-false}" --get hooks.commit.enable)

  declare COMMIT_FORMAT COMMIT_LINT COMMIT_TEST
  # boolean or string value for pre-commit format command
  # false -> disable | true -> deno fmt | string -> custom cmd
  COMMIT_FORMAT=$(git config --bool-or-str --default "${COMMIT_FORMAT:-true}" --get hooks.commit.format)

  # boolean or string value for pre-commit lint command
  # false -> disable | true -> deno lint | string -> custom cmd
  COMMIT_LINT=$(git config --bool-or-str --default "${COMMIT_LINT:-false}" --get hooks.commit.lint)

  # boolean or string value for pre-commit test command
  # false -> disable | true -> deno test -A --no-check | string -> custom cmd
  COMMIT_TEST=$(git config --bool-or-str --default "${COMMIT_TEST:-false}" --get hooks.commit.test)

  declare DEFAULT_COMMIT_FORMAT DEFAULT_COMMIT_LINT DEFAULT_COMMIT_TEST

  DEFAULT_COMMIT_FORMAT="deno fmt --unstable"
  DEFAULT_COMMIT_LINT="deno lint --unstable"
  DEFAULT_COMMIT_TEST="deno test --unstable --allow-all --no-check"

  declare -F usage precommit

  # ANSI color/style declarations (empty by default)
  declare GRN="" YLW="" CYN="" UDL="" DIM="" BLD="" RST=""
  # declare BLK="" RED="" BLU="" PRP="" WHT="" BWT="" INV="" REV="" FLS="" ITA="" #disabled

  # ANSI color/style definitions (for color-friendly terminals)
  if [[ "${NO_COLOR:-0}" == "0" ]]; then
    # text colors
    # note: terminal color support may vary
    # green (combine with bold for bright green)
    GRN=$(printf '\033[32m')
    # yellow (combine with bold for bright yellow)
    YLW=$(printf '\033[33m')
    # cyan (combine with bold for bright cyan)
    CYN=$(printf '\033[36m')
    # # black / default color
    # BLK=$(printf '\033[30m')
    # # red (combine with bold for bright red)
    # RED=$(printf '\033[31m')
    # # blue (combine with bold for bright blue)
    # BLU=$(printf '\033[34m')
    # # purple (combine with bold for bright purple)
    # PRP=$(printf '\033[35m')
    # # white (combine with bold for bright white)
    # WHT=$(printf '\033[37m')
    # # bright white
    # BWT=$(printf '\033[38m')

    # text styles
    # note: terminal style support may vary

    # # invisible characters
    # INV=$(printf '\033[08m')
    # # reverse colors
    # REV=$(printf '\033[07m')
    # # flashing colors
    # FLS=$(printf '\033[05m')
    # # italics
    # ITA=$(printf '\033[03m')
    # underline
    UDL=$(printf '\033[04m')
    # dimmed colors
    DIM=$(printf '\033[02m')
    # bold / bright colors
    BLD=$(printf '\033[01m')
    # reset all styles
    RST=$(printf '\033[00m')
  fi

  # Print the usage information for this hook.
  usage() {
    cat <<-EOL

			Available options in ${BLD}${CYN}git config${RST}:

				${YLW}hooks.commit.${BLD}format${RST}:
					${DIM}·${RST} ${BLD}Enable/disable code formatting before each commit.${RST}
					${DIM}·${RST} Setting to true is the same as "deno fmt --unstable"${RST}
					${DIM}·${RST} Set to a string to run a custom command, e.g.: "npm run format"${RST}
					${DIM}·${RST} ${UDL}Default${RST}:${BLD} true${RST}

				${YLW}hooks.commit.${BLD}lint${RST}:
					${DIM}·${RST} ${BLD}Enable/disable linting before each commit.${RST}
					${DIM}·${RST} Setting to true is the same as "deno lint --unstable"${RST}
					${DIM}·${RST} Set to a string to run a custom command, e.g.: "eslint ."${RST}
					${DIM}·${RST} ${UDL}Default${RST}:${BLD} true${RST}

				${YLW}hooks.commit.${BLD}test${RST}:
					${DIM}·${RST} ${BLD}Enable/disable unit testing before each commit.${RST}
					${DIM}·${RST} Setting to true is the same as "deno test -A --no-check --unstable"${RST}
					${DIM}·${RST} Set to a string to run a custom command, e.g.: "npm run test"${RST}
					${DIM}·${RST} ${UDL}Default${RST}:${BLD} true${RST}

				${YLW}hooks.${BLD}debug${RST}:
					${DIM}·${RST} ${BLD}Show detailed debugging information during hook process.${RST}
					${DIM}·${RST} ${UDL}Default${RST}: ${BLD}false${RST}

				${YLW}hooks.${BLD}silent${RST}:
					${DIM}·${RST} ${BLD}Silence all warnings and verbose output.${RST}
					${DIM}·${RST} ${UDL}Default${RST}: ${BLD}false${RST}

				${DIM}-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -${RST}

				Want to print additional debug info?
					${DIM}·${RST} ${DIM}${GRN}\$${RST} export ${BLD}DEBUG${RST}=${BLD}1${RST}
					${DIM}·${RST} ${DIM}${GRN}\$${RST} git config ${BLD}hooks.debug${RST} ${BLD}true${RST}

				Want to silence these messages?
					${DIM}·${RST} ${DIM}${GRN}\$${RST} export ${BLD}SILENT${RST}=${BLD}1${RST}
					${DIM}·${RST} ${DIM}${GRN}\$${RST} git config ${BLD}hooks.silent${RST} ${BLD}true${RST}
			EOL
  }

  precommit() {
    if [[ $ENABLED =~ ^(0|false|disable) ]]; then
      return 0
    fi

    local __fmt __lint __test __noop

    __noop() { :; }

    # format
    case "$COMMIT_FORMAT" in
    "1" | "true")
      __fmt="$DEFAULT_COMMIT_FORMAT"
      ;;
    "0" | "false" | "")
      __fmt="$__noop"
      ;;
    *) __fmt="$COMMIT_FORMAT" ;;
    esac

    # lint
    case "$COMMIT_LINT" in
    "1" | "true")
      __lint="$DEFAULT_COMMIT_LINT"
      ;;
    "0" | "false" | "")
      __lint="$__noop"
      ;;
    *) __lint="$COMMIT_LINT" ;;
    esac

    # test
    case "$COMMIT_TEST" in
    "1" | "true")
      __test="$DEFAULT_COMMIT_TEST"
      ;;
    "0" | "false" | "")
      __test="$__noop"
      ;;
    *) __test="$COMMIT_TEST" ;;
    esac

    # run fmt
    eval "$__fmt" || return $?
    # run lint
    eval "$__lint" || return $?
    # run test
    eval "$__test" || return $?

    # still here? commit!
    return 0
  }

  if [[ $1 =~ ^(-{0,2}(help|info|usage))|-(h|?)$ ]]; then
    usage
    [[ $DEBUG =~ ^(1|true)$ ]] && debug
    return 1
  fi

  precommit "$@"
  [[ $DEBUG =~ ^(1|true)$ ]] && debug
  return $?
}

# run the hook function and pipe the return status
__pre_commit_hook "$@" || exit $?

# cleanup
unset -f __pre_commit_hook &>/dev/null

# graceful fallback
exit 0
